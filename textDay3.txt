//FOLDER STRUCTURE IN CYPRESS


What you’ll learn
How to organize your test and support files.
What languages are supported in your test files.
How Cypress handles unit tests vs integration tests.
How to group your tests.


Cypress will automatically scaffold out a suggested folder structure. By default it will create:

/cypress
  /fixtures
    - example.json

  /integration
    /examples
      - actions.spec.js
      - aliasing.spec.js
      - assertions.spec.js
      - connectors.spec.js
      - cookies.spec.js
      - cypress_api.spec.js
      - files.spec.js
      - local_storage.spec.js
      - location.spec.js
      - misc.spec.js
      - navigation.spec.js
      - network_requests.spec.js
      - querying.spec.js
      - spies_stubs_clocks.spec.js
      - traversal.spec.js
      - utilities.spec.js
      - viewport.spec.js
      - waiting.spec.js
      - window.spec.js

  /plugins
    - index.js

  /support
    - commands.js
    - index.js


// You can modify the folder configuration in your configuration file

What files should I add to my ‘.gitignore file’ ?
Cypress will create a screenshotsFolder and a videosFolder to store the screenshots and videos taken during the testing of your application. 
Many users will opt to add these folders to their .gitignore file. 
Additionally, if you are storing sensitive environment variables in your configuration file (cypress.json by default) or cypress.env.json, 
these should also be ignored when you check into source control.




Fixture Files
Fixtures are used as external pieces of static data that can be used by your tests. 
Fixture files are located in cypress/fixtures by default, but can be configured to another directory.
You would typically use them with the cy.fixture() command and most often when you’re stubbing



Test files

Test files are located in cypress/integration by default, but can be configured to another directory. 
Test files may be written as:

.js
.jsx
.coffee
.cjsx
Cypress also supports ES2015 out of the box. 
You can use either ES2015 modules or CommonJS modules.
This means you can import or require both npm packages and local relative modules.


To see an example of every command used in Cypress,
open the example folder within your cypress/integration folder.
To start writing tests for your app, create a new file like app_spec.js within your cypress/integration folder.
Refresh your tests list in the Cypress Test Runner and your new file should have appeared in the list.

Plugin files
By default Cypress will automatically include the plugins file cypress/plugins/index.js before every single spec file it runs. 
We do this purely as a convenience mechanism so you don’t have to import this file in every single one of your spec files.

Support file


By default Cypress will automatically include the support file cypress/support/index.js.
This file runs before every single spec file. 
We do this purely as a convenience mechanism so you don’t have to import this file in every single one of your spec files.
Keep in mind, when clicking “Run all specs” after cypress open, the code in the support file is executed once before all spec files, 
instead of once before each spec file. 
See Execution for more details.
The initial imported support file can be configured to another file or turned off completely using the supportFile configuration.
The support file is a great place to put reusable behavior such as custom commands or global overrides that you want applied and available to all of your spec files.
From your support file you can import or require other files to keep things organized.
We automatically seed an example support file, which has several commented out examples.
You can define behaviors in a before or beforeEach within any of the cypress/support files:

beforeEach(() => {
  cy.log('I run before every test in every spec file!!!!!!')
})

Global hooks for tests
Note: This example assumes you are already familiar with Mocha hooks.

https://glebbahmutov.com/blog/run-all-specs/

Execution
Cypress executes the support file before the spec file. For example when you click on a test file named spec-a.js via cypress open, then the Test Runner executes the files in the following order:

<!-- bundled support file -->
<script src="support/index.js"></script>
<!-- bundled spec file -->
<script src="integration/spec-a.js"></script>
The same happens when using the cypress run command: a new browser window is opened for each support and spec file pair.

But when you click on “Run all specs” button after cypress open, 
the Test Runner bundles and concatenates all specs together, 
in essence running scripts like shown below. 
This means the code in the support file is executed once before all spec files, 
instead of once before each spec file.

<!-- bundled support file -->
<script src="support/index.js"></script>
<!-- bundled first spec file, second spec file, etc -->
<script src="integration/spec-a.js"></script>
<script src="integration/spec-b.js"></script>
...


<script src="integration/spec-n.js"></script>
Having a single support file when running all specs together might execute before and beforeEach hooks in ways you may not anticipate. 
Read ‘Be careful when running all specs together’ for examples.


Test Structure
The test interface, borrowed from Mocha, provides describe(), context(), it() and specify().

context() is identical to describe() and specify() is identical to it(), so choose whatever terminology works best for you.

// -- Start: Our Application Code --
function add (a, b) {
  return a + b
}

function subtract (a, b) {
  return a - b
}

function divide (a, b) {
  return a / b
}

function multiply (a, b) {
  return a * b
}
// -- End: Our Application Code --

// -- Start: Our Cypress Tests --
describe('Unit test our math functions', () => {
  context('math', () => {
    it('can add numbers', () => {
      expect(add(1, 2)).to.eq(3)
    })

    it('can subtract numbers', () => {
      expect(subtract(5, 12)).to.eq(-7)
    })

    specify('can divide numbers', () => {
      expect(divide(27, 9)).to.eq(3)
    })

    specify('can multiply numbers', () => {
      expect(multiply(5, 4)).to.eq(20)
    })
  })
})
// -- End: Our Cypress Tests --


Hooks
Cypress also provides hooks (borrowed from Mocha).

These are helpful to set conditions that you want to run before a set of tests or before each test. They’re also helpful to clean up conditions after a set of tests or after each test.

beforeEach(() => {
  // root-level hook
  // runs before every test
})

describe('Hooks', () => {
  before(() => {
    // runs once before all tests in the block
  })

  beforeEach(() => {
    // runs before each test in the block
  })

  afterEach(() => {
    // runs after each test in the block
  })

  after(() => {
    // runs once after all tests in the block
  })
})

The order of hook and test execution is as follows:
1.All before() hooks run (once)
2.Any beforeEach() hooks run
3.Tests run
4.Any afterEach() hooks run
5.All after() hooks run (once)


















